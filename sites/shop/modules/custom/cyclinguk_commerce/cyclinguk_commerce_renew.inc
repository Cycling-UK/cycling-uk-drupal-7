<?php

/**
 * @file
 * Callback function to generate the form to add a membership renewal to the
 *   shopping basket.
 *
 * The form itself is generated by the line_item definition, using fields that
 * have "Include this field on Add to Cart forms for line items of this type."
 */

/**
 * Renew membership for a given ContactNumber
 *
 * @param $contact_number
 *
 * @return array|mixed|null
 * @throws \EntityMetadataWrapperException
 */
function cyclinguk_commerce_renew_membership($contact_number) {
  // Get membership data.
  $payment_method = '';
  $data = ['ContactNumber' => (int) $contact_number,];
  $care_xml_data = care_call_method('FindMembers', $data);
  if (!isset($care_xml_data->ErrorMessage)) {
    $memberships_data = [];
    $memberships_data2 = [];
    foreach ($care_xml_data as $membership) {
      // Look for membership records with non-zero balance.
      $not_cancelled = (string) $membership->CancellationReason == '';
      $balance = (float) $membership->Balance;
      if ($not_cancelled && $balance) {
        // Check for DD payments.
        $payment_method = '';
        $data = [
          'PaymentPlanNumber' => (int) $membership->PaymentPlanNumber,
        ];
        $care_dd_xml_data = care_call_method('FindPaymentPlans', $data);
        if (!isset($care_dd_xml_data->ErrorMessage)) {
          $plan = $care_dd_xml_data->DataRow;
          $payment_method = (string) $plan->PaymentMethod;
        }
        if ($payment_method != 'DD') {
          $renewal_date = DateTime::createFromFormat('d/m/Y', $membership->RenewalDate);
          $membership_data = [
            'membership_type' => (string) $membership->MembershipType,
            'membership_number' => (int) $membership->MembershipNumber,
            'joined' => (string) $membership->Joined,
            'payment_plan_number' => (int) $membership->PaymentPlanNumber,
            'renewal_date' => $renewal_date->format('Y-m-d'),
            'balance' => (float) $membership->Balance,
            'payment_method' => $payment_method,
            'refreshed' => date('Y-m-d H:i:s'),
          ];
          $memberships_data[] = $membership_data;
        }
      }
      elseif ($not_cancelled) {
        // Check for DD payments.
        $data = [
          'PaymentPlanNumber' => (int) $membership->PaymentPlanNumber,
        ];
        $care_dd_xml_data = care_call_method('FindPaymentPlans', $data);
        if (!isset($care_dd_xml_data->ErrorMessage)) {
          $plan = $care_dd_xml_data->DataRow;
          $payment_method = (string) $plan->PaymentMethod;
        }
        $renewal_date = DateTime::createFromFormat('d/m/Y', $membership->RenewalDate);
        $membership_data2 = [
          'membership_type' => (string) $membership->MembershipType,
          'membership_number' => (int) $membership->MembershipNumber,
          'joined' => (string) $membership->Joined,
          'payment_plan_number' => (int) $membership->PaymentPlanNumber,
          'renewal_date' => $renewal_date->format('Y-m-d'),
          'balance' => (float) $membership->Balance,
          'payment_method' => $payment_method,
          'refreshed' => date('Y-m-d H:i:s'),
        ];
        $memberships_data2[] = $membership_data2;
      }
    }
    if (count($memberships_data)) {
      /** @noinspection LoopWhichDoesNotLoopInspection */
      foreach ($memberships_data as $membership_to_renew) {
        // ToDo: fix this to enable multiple renewals, somehow.
        // Will just do the first, at the moment.
        $product = commerce_product_load_by_sku('RENEWAL');
        $line_item = commerce_product_line_item_new($product, 1, NULL, [], 'membership_renewal');
        $line_item->data['context']['product_ids'] = [
          $product->product_id,
        ];
        $line_item->data['context']['add_to_cart_combine'] = TRUE;
        $line_item->quantity = 1;
        $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
        $line_item_wrapper->field_membership = $membership_to_renew;
        $line_item_wrapper->field_membership_number = [
          'number' => $contact_number,
          'local_unsent_changes' => CARE_FIELDS_UNCHANGED,
        ];
        $payment_option = $membership_to_renew['payment_method'] == 'DD' ? 'DDA' : 'CCA';
        $line_item_wrapper->field_payment_option = $payment_option;
        $line_item_wrapper->commerce_unit_price->amount = ($membership_to_renew['balance'] * 100);
        commerce_line_item_rebase_unit_price($line_item_wrapper->value());
        commerce_line_item_save($line_item_wrapper->value());
        // Generate the add to cart form.
        $form_id = commerce_cart_add_to_cart_form_id([
          $product->product_id,
        ]);
        // Generate the Add to Cart form with this new line item.
        $form = drupal_get_form($form_id, $line_item);
        array_unshift($form['#submit'], 'cyclinguk_commerce_add_renewal_submit');
        $form_state['line_item'] = $line_item;
        $form['#theme'] = ['cyclinguk_commerce_renewal_form'];
        return $form;
      }
    }
    elseif (count($memberships_data2)) {
      /** @noinspection LoopWhichDoesNotLoopInspection */
      foreach ($memberships_data2 as $membership_current) {
        if ($membership_current['payment_method'] == 'DD') {
          return t("Thank you for your support, your membership %number is not due for renewal till %date and is set to renew automatically by direct debit.", [
            '%number' => $contact_number,
            '%date' => $membership_current['renewal_date'],
          ]);
        }
        return t("Thank you for your support, your membership %number is not due for renewal until %date.", [
          '%number' => $contact_number,
          '%date' => $membership_current['renewal_date'],
        ]);
      }
    }
    elseif ($payment_method == 'DD') {
      /** @noinspection HtmlUnknownTarget */
      return t('Membership %number is due to be paid by direct debit, you do not need to do anything to renew your membership. If you would like to cancel you membership please contact our <a href="/contact">membership department.</a>', ['%number' => $contact_number]);
    }
    else {
      /** @noinspection HtmlUnknownTarget */
      return t('There is no current membership for membership number %number, <a href="/join">join today</a> to become a member or if you think this is not correct please <a href="/contact">contact the membership department</a>.', ['%number' => $contact_number]);
    }
  }
  return '';
}
