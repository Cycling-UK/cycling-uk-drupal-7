 mimemail.inc        | 79 +++++++++++++++++++++++++++--------------------------
 tests/mimemail.test | 14 ++++++----
 2 files changed, 49 insertions(+), 44 deletions(-)

diff --git a/mimemail.inc b/mimemail.inc
index dd7847f..ffdc198 100644
--- a/mimemail.inc
+++ b/mimemail.inc
@@ -160,30 +160,38 @@ function _mimemail_replace_files($matches) {
  *   (optional) The content disposition. Defaults to inline.
  *
  * @return
- *   The Content-ID and/or an array of the files on success or the URL on failure.
+ *   If $url/$content can be embedded, return Content-ID, and add the file to the static list of accumulated files.
+ *   If $url/$content can't be embedded, return the URL.
+ *   If called with no parameters, return a list of accumulated files, and reset that list.
  */
 function _mimemail_file($url = NULL, $content = NULL, $name = '', $type = '', $disposition = 'inline') {
   static $files = array();
   static $ids = array();
 
   if ($url) {
-    $image = preg_match('!\.(png|gif|jpg|jpeg)$!i', $url);
+    // Keep track of a local path (used to embed) separately from the URL (used if embed fails).
+    $local_path = $url;
+
+    // Correctly format the URL in case we can't embed.
+    $url = _mimemail_url($url, TRUE);
+
+    // Check link-only settings.
+    $image = preg_match('!\.(png|gif|jpg|jpeg)(\?|$)!i', $url);
     $linkonly = variable_get('mimemail_linkonly', 0);
-    // The file exists on the server as-is. Allows for non-web-accessible files.
-    if (@is_file($url) && $image && !$linkonly) {
-      $file = $url;
+    if ($image && $linkonly) {
+      return $url;
     }
-    else {
-      $url = _mimemail_url($url, 'TRUE');
-      // The $url is absolute, we're done here.
-      $scheme = file_uri_scheme($url);
-      if ($scheme == 'http' || $scheme == 'https' || preg_match('!mailto:!', $url) || preg_match('!^data:!', $url)) {
-        return $url;
-      }
-      // The $url is a non-local URI that needs to be converted to a URL.
-      else {
-        $file = (drupal_realpath($url)) ? drupal_realpath($url) : file_create_url($url);
-      }
+
+    // Remove the base path and query string (image style token).
+    $local_path = urldecode($local_path);
+    $local_path = preg_replace('!^' . base_path() . '!', '', $local_path, 1);
+    $local_path = preg_replace('/\\?itok=.*$/', '', $local_path);
+
+    // drupal_realpath can handle either a stream wrapper or a filepath.
+    $file = drupal_realpath($local_path);
+    if (!$file) {
+      // File does not exist.
+      return $url;
     }
   }
   // We have the actual content.
@@ -441,38 +449,33 @@ function mimemail_html_body($body, $subject, $plain = FALSE, $plaintext = NULL,
  * Helper function to format URLs.
  *
  * @param string $url
- *   The file path.
+ *   Input URL.
  * @param boolean $to_embed
- *   (optional) Wheter the URL is used to embed the file. Defaults to NULL.
+ *   (optional) Whether the URL is used to embed the file. Defaults to NULL.
  *
  * @return string
- *   A processed URL.
+ *   A processed URL with absolute path ready to use in a mail message.
  */
 function _mimemail_url($url, $to_embed = NULL) {
+  global $base_url;
   $url = urldecode($url);
 
-  $to_link = variable_get('mimemail_linkonly', 0);
-  $is_image = preg_match('!\.(png|gif|jpg|jpeg)!i', $url);
-  $is_absolute = file_uri_scheme($url) != FALSE || preg_match('!(mailto|callto|tel)\:!', $url);
+  if ($to_embed) {
+    // Convert to URL.
+    $url = file_create_url($url);
 
-  if (!$to_embed) {
-    if ($is_absolute) {
-      return str_replace(' ', '%20', $url);
+    if ($url[0] == '/') {
+      // file_create_url will leave a root-relative URL as is.  Convert this to an absolute path.
+      // Add on the $base_url.  However $base_url includes base_path, so remove that first if present.
+      $url = $base_url . '/' . preg_replace('!^' . base_path() . '!', '', $url);
     }
+
+    return str_replace(' ', '%20', $url);
   }
-  else {
-    $url = preg_replace('!^' . base_path() . '!', '', $url, 1);
-    if ($is_image) {
-      // Remove security token from URL, this allows for styled image embedding.
-      // @see https://drupal.org/drupal-7.20-release-notes
-      $url = preg_replace('/\\?itok=.*$/', '', $url);
-      if ($to_link) {
-        // Exclude images from embedding if needed.
-        $url = file_create_url($url);
-        $url = str_replace(' ', '%20', $url);
-      }
-    }
-    return $url;
+
+  $is_absolute = file_uri_scheme($url) != FALSE || preg_match('!(mailto|callto|tel)\:!', $url);
+  if ($is_absolute) {
+    return str_replace(' ', '%20', $url);
   }
 
   $url = str_replace('?q=', '', $url);
diff --git a/tests/mimemail.test b/tests/mimemail.test
index 6619841..b8d926b 100644
--- a/tests/mimemail.test
+++ b/tests/mimemail.test
@@ -39,17 +39,19 @@ class MimeMailUnitTestCase extends DrupalUnitTestCase {
   }
 
   function testUrl() {
+    global $base_url;
     $result = _mimemail_url('#');
     $this->assertIdentical($result, '#', 'Hash mark URL without fragment left intact.');
 
     $url = '/sites/default/files/styles/thumbnail/public/image.jpg?itok=Wrl6Qi9U';
     $result = _mimemail_url($url, TRUE);
-    $expected = 'sites/default/files/styles/thumbnail/public/image.jpg';
-    $this->assertIdentical($result, $expected, 'Security token removed from styled image URL.');
+    $expected = $base_url . $url;
+    $this->assertIdentical($result, $expected, 'Security token preserved on URL.');
 
-    $expected = $url = 'public://' . $this->randomName() . ' ' . $this->randomName() . '.' . $this->randomName(3);
-    $result = _mimemail_url($url, TRUE);
-    $this->assertIdentical($result, $expected, 'Space in the filename of the attachment left intact.');
+    $file = $this->randomName() . ' '. $this->randomName() . '.' . $this->randomName(3);
+    $result = _mimemail_url('public://' . $file, TRUE);
+    $expected = file_create_url('public://') . str_replace(' ', '%20', $file);
+    $this->assertIdentical($result, $expected, 'Space in the filename converted in URL.');
   }
 
 }
@@ -90,7 +92,7 @@ class MimeMailWebTestCase extends DrupalWebTestCase {
       t('Save configuration'));
 
     $url = 'public://' . $this->randomName() . ' ' . $this->randomName() . '.jpg';
-    $result = _mimemail_url($url, TRUE);
+    $result = _mimemail_file($url);
     $expected = str_replace(' ', '%20', file_create_url($url));
     $message = 'Stream wrapper converted to web accessible URL for linked image.';
     $this->assertIdentical($result, $expected, $message);
